services:
  stats_service:
    container_name: stats-service
    build:
      context: ./backend/stats_service
    volumes:
      - ./backend/stats_service:/usr/src/app/
    env_file:
      - ./backend/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres: {}
      gateway: {}
    networks:
      - microservices
      - transcendence

  user_service:
    container_name: user-service
    build:
      context: ./backend/user_service
    volumes:
      - ./backend/user_service:/usr/src/app/
    env_file:
      - ./backend/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres: {}
      gateway: {}
    networks:
      - microservices
      - transcendence

  auth_service:
    container_name: auth-service
    build:
      context: ./backend/auth_service
    volumes:
      - ./backend/auth_service:/usr/src/app/
    env_file:
      - ./backend/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres: {}
      gateway: {}
    networks:
      - microservices
      - transcendence

  game_service:
    container_name: game-service
    build:
      context: ./backend/game_service
    volumes:
      - ./backend/game_service:/usr/src/app/
    env_file:
      - ./backend/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres: {}
      gateway: {}
    networks:
      - microservices
      - transcendence

  tournament_service:
    container_name: tournament-service
    build:
      context: ./backend/tournament_service
    volumes:
      - ./backend/tournament_service:/usr/src/app/
    env_file:
      - ./backend/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres: {}
    networks:
      - microservices
      - transcendence

  gateway: {}
    container_name: gateway
    build:
      context: ./backend/gateway
    volumes:
      - ./backend/gateway:/usr/src/app/
    env_file:
      - ./backend/.env
    networks:
      - transcendence
    depends_on:
      rabbitmq:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./elk_stack/logs/nginx_logs:/var/log/nginx
    ports:
      - 443:443
    env_file:
      - ./frontend/.env
    depends_on:
      - postgres
    networks:
      - transcendence

  postgres: {}
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    environment:
      - CHOKIDAR_USEPOLLING=true
    env_file:
      - ./postgres/.env
    networks:
      - microservices

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ELASTIC_PASSWORD=changeme
    ports:
      - "9200:9200"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
      - ./elk_stack/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml 
    networks:
      - transcendence

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.10.0
    volumes:
      - ./elk_stack/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./elk_stack/logs/nginx_logs:/var/log/nginx
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch
    networks:
      - transcendence

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.10.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
      - SERVER_BASEPATH=/kibana
      - SERVER_REWRITEBASEPATH=true
    depends_on:
      - elasticsearch
    volumes:
      - ./elk_stack/kibana/kibana_index_pattern.ndjson:/usr/share/kibana/config/kibana_index_pattern.ndjson
      - ./elk_stack/kibana/kibana-setup.sh:/usr/local/bin/kibana-setup.sh
      - ./elk_stack/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - transcendence
    entrypoint: ["/bin/bash", "-c", "/usr/local/bin/kibana-docker && /usr/local/bin/kibana-setup.sh"]

  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    expose:
      - "9090"
    networks:
      - transcendence
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.external-url=http://prometheus:9090/prometheus'
      - '--web.route-prefix=/prometheus'

    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    expose:
      - "3000"
    environment:
      - GF_SERVER_ROOT_URL=http://grafana:3000/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    networks:
      - transcendence
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./grafana/provisioning/datasources/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml

  rabbitmq:
    build:
      context: ./rabbitmq
    container_name: rabbitmq
    expose:
      - "5672"
      - "15672"
    env_file:
      - rabbitmq/.env
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - microservices
      - transcendence

volumes:
  postgres-data: {}
  prometheus-data: {}
  grafana-storage: {}
  elastic_data: {}

networks:
  transcendence:
    driver: bridge
  microservices:
    driver: bridge