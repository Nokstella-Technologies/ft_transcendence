services:
  user_service:
    container_name: user-service
    build:
      context: ./backend/user_service
    volumes:
      - ./backend/user_service:/usr/src/app/
    expose:
      - "8000"
    env_file:
      - ./backend/.env
    depends_on:
      - rabbitmq
      - gateway
      - postgres
    networks:
      - transcendence

  auth_service:
    container_name: auth-service
    build:
      context: ./backend/auth_service
    volumes:
      - ./backend/auth_service:/usr/src/app/
    expose:
      - "8000"
    env_file:
      - ./backend/.env
    depends_on:
      - rabbitmq
      - gateway
      - postgres
    networks:
      - transcendence

  game_service:
    container_name: game-service
    build:
      context: ./backend/game_service
    volumes:
      - ./backend/game_service:/usr/src/app/
    expose:
      - "8000"
    env_file:
      - ./backend/.env
    depends_on:
      - rabbitmq
      - postgres
    networks:
      - transcendence

  tournament_service:
    container_name: tournament-service
    build:
      context: ./backend/tournament_service
    volumes:
      - ./backend/tournament_service:/usr/src/app/
    expose:
      - "8000"
    env_file:
      - ./backend/.env
    depends_on:
      - rabbitmq
      - postgres
    networks:
      - transcendence

  stats_service:
    container_name: stats-service
    build:
      context: ./backend/stats_service
    volumes:
      - ./backend/stats_service:/usr/src/app/
    expose:
      - "8000"
    env_file:
      - ./backend/.env
    depends_on:
      - rabbitmq
      - postgres
    networks:
      - transcendence

  gateway:
    container_name: gateway
    build:
      context: ./backend/gateway
    volumes:
      - ./backend/gateway:/usr/src/app/
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    networks:
      - transcendence

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    volumes:
      - ./frontend:/usr/share/nginx/html
    ports:
      - 443:443
      - 80:80
    env_file:
      - ./frontend/.env
    depends_on:
      - postgres
    networks:
      - transcendence

  postgres:
    image: postgres:16.3-alpine
    container_name: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    environment:
      - CHOKIDAR_USEPOLLING=true
    env_file:
      - ./.env
    networks:
      - transcendence

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   networks:
  #     - monitoring

  # elasticsearch:
  #   image: elasticsearch:7.16.2
  #   container_name: elasticsearch
  #   restart: always
  #   volumes:
  #     - elastic_data:/usr/share/elasticsearch/data/
  #   environment:
  #     ES_JAVA_OPTS: "-Xmx1g -Xms1g"
  #     discovery.type: single-node
  #   ports:
  #     - '9200:9200'
  #     - '9300:9300'
  #   networks:
  #     - elk
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #         memory: 2g

  # logstash:
  #   image: logstash:7.16.2
  #   container_name: logstash
  #   restart: always
  #   volumes:
  #     - ./logstash/:/logstash_dir
  #   command: logstash -f /logstash_dir/logstash.conf
  #   depends_on:
  #     - elasticsearch
  #   ports:
  #     - '9600:9600'
  #   environment:
  #     LS_JAVA_OPTS: "-Xmx1g -Xms1g"
  #   networks:
  #     - elk
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #         memory: 2g

  # kibana:
  #   image: kibana:7.16.2
  #   container_name: kibana
  #   restart: always
  #   ports:
  #     - '5601:5601'
  #   environment:
  #     - ELASTICSEARCH_URL=http://elasticsearch:9200
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - elk
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #         memory: 2g

  rabbitmq:
    build:
      context: ./rabbitmq
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - rabbitmq/.env
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - transcendence

volumes:
  postgres-data:
  elastic_data: {}

networks:
  transcendence:
    driver: bridge
  elk:
    driver: bridge
  monitoring:
    driver: bridge

